// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defining_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_defining_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_defining_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "result.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_defining_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_defining_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_defining_5fservice_2eproto;
namespace example {
class Foo;
struct FooDefaultTypeInternal;
extern FooDefaultTypeInternal _Foo_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> ::example::Foo* Arena::CreateMaybeMessage<::example::Foo>(Arena*);
template<> ::example::SearchRequest* Arena::CreateMaybeMessage<::example::SearchRequest>(Arena*);
template<> ::example::SearchResponse* Arena::CreateMaybeMessage<::example::SearchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace example {

enum Foo_EnumAllowingAlias : int {
  Foo_EnumAllowingAlias_UNKNOW = 0,
  Foo_EnumAllowingAlias_STARTED = 1,
  Foo_EnumAllowingAlias_RUNNING = 1
};
bool Foo_EnumAllowingAlias_IsValid(int value);
constexpr Foo_EnumAllowingAlias Foo_EnumAllowingAlias_EnumAllowingAlias_MIN = Foo_EnumAllowingAlias_UNKNOW;
constexpr Foo_EnumAllowingAlias Foo_EnumAllowingAlias_EnumAllowingAlias_MAX = Foo_EnumAllowingAlias_STARTED;
constexpr int Foo_EnumAllowingAlias_EnumAllowingAlias_ARRAYSIZE = Foo_EnumAllowingAlias_EnumAllowingAlias_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Foo_EnumAllowingAlias_descriptor();
template<typename T>
inline const std::string& Foo_EnumAllowingAlias_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Foo_EnumAllowingAlias>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Foo_EnumAllowingAlias_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Foo_EnumAllowingAlias_descriptor(), enum_t_value);
}
inline bool Foo_EnumAllowingAlias_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Foo_EnumAllowingAlias* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Foo_EnumAllowingAlias>(
    Foo_EnumAllowingAlias_descriptor(), name, value);
}
enum SearchRequest_Copus : int {
  SearchRequest_Copus_UNIVERSAL = 0,
  SearchRequest_Copus_WEB = 1,
  SearchRequest_Copus_IMAGES = 2,
  SearchRequest_Copus_LOCAL = 3,
  SearchRequest_Copus_NEWS = 4,
  SearchRequest_Copus_PRODUCTS = 5,
  SearchRequest_Copus_VIDEO = 6
};
bool SearchRequest_Copus_IsValid(int value);
constexpr SearchRequest_Copus SearchRequest_Copus_Copus_MIN = SearchRequest_Copus_UNIVERSAL;
constexpr SearchRequest_Copus SearchRequest_Copus_Copus_MAX = SearchRequest_Copus_VIDEO;
constexpr int SearchRequest_Copus_Copus_ARRAYSIZE = SearchRequest_Copus_Copus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchRequest_Copus_descriptor();
template<typename T>
inline const std::string& SearchRequest_Copus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchRequest_Copus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchRequest_Copus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SearchRequest_Copus_descriptor(), enum_t_value);
}
inline bool SearchRequest_Copus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SearchRequest_Copus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SearchRequest_Copus>(
    SearchRequest_Copus_descriptor(), name, value);
}
// ===================================================================

class Foo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.Foo) */ {
 public:
  inline Foo() : Foo(nullptr) {}
  ~Foo() override;
  explicit constexpr Foo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Foo(const Foo& from);
  Foo(Foo&& from) noexcept
    : Foo() {
    *this = ::std::move(from);
  }

  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Foo& operator=(Foo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Foo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Foo* internal_default_instance() {
    return reinterpret_cast<const Foo*>(
               &_Foo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Foo& a, Foo& b) {
    a.Swap(&b);
  }
  inline void Swap(Foo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Foo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Foo* New() const final {
    return new Foo();
  }

  Foo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Foo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Foo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Foo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Foo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.Foo";
  }
  protected:
  explicit Foo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Foo_EnumAllowingAlias EnumAllowingAlias;
  static constexpr EnumAllowingAlias UNKNOW =
    Foo_EnumAllowingAlias_UNKNOW;
  static constexpr EnumAllowingAlias STARTED =
    Foo_EnumAllowingAlias_STARTED;
  static constexpr EnumAllowingAlias RUNNING =
    Foo_EnumAllowingAlias_RUNNING;
  static inline bool EnumAllowingAlias_IsValid(int value) {
    return Foo_EnumAllowingAlias_IsValid(value);
  }
  static constexpr EnumAllowingAlias EnumAllowingAlias_MIN =
    Foo_EnumAllowingAlias_EnumAllowingAlias_MIN;
  static constexpr EnumAllowingAlias EnumAllowingAlias_MAX =
    Foo_EnumAllowingAlias_EnumAllowingAlias_MAX;
  static constexpr int EnumAllowingAlias_ARRAYSIZE =
    Foo_EnumAllowingAlias_EnumAllowingAlias_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EnumAllowingAlias_descriptor() {
    return Foo_EnumAllowingAlias_descriptor();
  }
  template<typename T>
  static inline const std::string& EnumAllowingAlias_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EnumAllowingAlias>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EnumAllowingAlias_Name.");
    return Foo_EnumAllowingAlias_Name(enum_t_value);
  }
  static inline bool EnumAllowingAlias_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EnumAllowingAlias* value) {
    return Foo_EnumAllowingAlias_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:example.Foo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_defining_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit constexpr SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return new SearchRequest();
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchRequest_Copus Copus;
  static constexpr Copus UNIVERSAL =
    SearchRequest_Copus_UNIVERSAL;
  static constexpr Copus WEB =
    SearchRequest_Copus_WEB;
  static constexpr Copus IMAGES =
    SearchRequest_Copus_IMAGES;
  static constexpr Copus LOCAL =
    SearchRequest_Copus_LOCAL;
  static constexpr Copus NEWS =
    SearchRequest_Copus_NEWS;
  static constexpr Copus PRODUCTS =
    SearchRequest_Copus_PRODUCTS;
  static constexpr Copus VIDEO =
    SearchRequest_Copus_VIDEO;
  static inline bool Copus_IsValid(int value) {
    return SearchRequest_Copus_IsValid(value);
  }
  static constexpr Copus Copus_MIN =
    SearchRequest_Copus_Copus_MIN;
  static constexpr Copus Copus_MAX =
    SearchRequest_Copus_Copus_MAX;
  static constexpr int Copus_ARRAYSIZE =
    SearchRequest_Copus_Copus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Copus_descriptor() {
    return SearchRequest_Copus_descriptor();
  }
  template<typename T>
  static inline const std::string& Copus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Copus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Copus_Name.");
    return SearchRequest_Copus_Name(enum_t_value);
  }
  static inline bool Copus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Copus* value) {
    return SearchRequest_Copus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kCorpusFieldNumber = 4,
    kResultPerPageFieldNumber = 3,
  };
  // required string query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_MUST_USE_RESULT std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // optional int32 page_number = 2;
  bool has_page_number() const;
  private:
  bool _internal_has_page_number() const;
  public:
  void clear_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 page_number() const;
  void set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_number() const;
  void _internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .example.SearchRequest.Copus corpus = 4 [default = UNIVERSAL];
  bool has_corpus() const;
  private:
  bool _internal_has_corpus() const;
  public:
  void clear_corpus();
  ::example::SearchRequest_Copus corpus() const;
  void set_corpus(::example::SearchRequest_Copus value);
  private:
  ::example::SearchRequest_Copus _internal_corpus() const;
  void _internal_set_corpus(::example::SearchRequest_Copus value);
  public:

  // optional int32 result_per_page = 3 [default = 10];
  bool has_result_per_page() const;
  private:
  bool _internal_has_result_per_page() const;
  public:
  void clear_result_per_page();
  ::PROTOBUF_NAMESPACE_ID::int32 result_per_page() const;
  void set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_per_page() const;
  void _internal_set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_number_;
  int corpus_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_per_page_;
  friend struct ::TableStruct_defining_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit constexpr SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return new SearchResponse();
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .example.Result result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::example::Result* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >*
      mutable_result();
  private:
  const ::example::Result& _internal_result(int index) const;
  ::example::Result* _internal_add_result();
  public:
  const ::example::Result& result(int index) const;
  ::example::Result* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >&
      result() const;

  // @@protoc_insertion_point(class_scope:example.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result > result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_defining_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Foo

// -------------------------------------------------------------------

// SearchRequest

// required string query = 1;
inline bool SearchRequest::_internal_has_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchRequest::has_query() const {
  return _internal_has_query();
}
inline void SearchRequest::clear_query() {
  query_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_query(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:example.SearchRequest.query)
}
inline std::string* SearchRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:example.SearchRequest.query)
  return _s;
}
inline const std::string& SearchRequest::_internal_query() const {
  return query_.Get();
}
inline void SearchRequest::_internal_set_query(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_query() {
  _has_bits_[0] |= 0x00000001u;
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:example.SearchRequest.query)
  if (!_internal_has_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:example.SearchRequest.query)
}

// optional int32 page_number = 2;
inline bool SearchRequest::_internal_has_page_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SearchRequest::has_page_number() const {
  return _internal_has_page_number();
}
inline void SearchRequest::clear_page_number() {
  page_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::_internal_page_number() const {
  return page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::page_number() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.page_number)
  return _internal_page_number();
}
inline void SearchRequest::_internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_number_ = value;
}
inline void SearchRequest::set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:example.SearchRequest.page_number)
}

// optional int32 result_per_page = 3 [default = 10];
inline bool SearchRequest::_internal_has_result_per_page() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SearchRequest::has_result_per_page() const {
  return _internal_has_result_per_page();
}
inline void SearchRequest::clear_result_per_page() {
  result_per_page_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::_internal_result_per_page() const {
  return result_per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::result_per_page() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.result_per_page)
  return _internal_result_per_page();
}
inline void SearchRequest::_internal_set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  result_per_page_ = value;
}
inline void SearchRequest::set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_per_page(value);
  // @@protoc_insertion_point(field_set:example.SearchRequest.result_per_page)
}

// optional .example.SearchRequest.Copus corpus = 4 [default = UNIVERSAL];
inline bool SearchRequest::_internal_has_corpus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SearchRequest::has_corpus() const {
  return _internal_has_corpus();
}
inline void SearchRequest::clear_corpus() {
  corpus_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::example::SearchRequest_Copus SearchRequest::_internal_corpus() const {
  return static_cast< ::example::SearchRequest_Copus >(corpus_);
}
inline ::example::SearchRequest_Copus SearchRequest::corpus() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.corpus)
  return _internal_corpus();
}
inline void SearchRequest::_internal_set_corpus(::example::SearchRequest_Copus value) {
  assert(::example::SearchRequest_Copus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  corpus_ = value;
}
inline void SearchRequest::set_corpus(::example::SearchRequest_Copus value) {
  _internal_set_corpus(value);
  // @@protoc_insertion_point(field_set:example.SearchRequest.corpus)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .example.Result result = 1;
inline int SearchResponse::_internal_result_size() const {
  return result_.size();
}
inline int SearchResponse::result_size() const {
  return _internal_result_size();
}
inline ::example::Result* SearchResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:example.SearchResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >*
SearchResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:example.SearchResponse.result)
  return &result_;
}
inline const ::example::Result& SearchResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::example::Result& SearchResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:example.SearchResponse.result)
  return _internal_result(index);
}
inline ::example::Result* SearchResponse::_internal_add_result() {
  return result_.Add();
}
inline ::example::Result* SearchResponse::add_result() {
  ::example::Result* _add = _internal_add_result();
  // @@protoc_insertion_point(field_add:example.SearchResponse.result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >&
SearchResponse::result() const {
  // @@protoc_insertion_point(field_list:example.SearchResponse.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::example::Foo_EnumAllowingAlias> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::example::Foo_EnumAllowingAlias>() {
  return ::example::Foo_EnumAllowingAlias_descriptor();
}
template <> struct is_proto_enum< ::example::SearchRequest_Copus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::example::SearchRequest_Copus>() {
  return ::example::SearchRequest_Copus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_defining_5fservice_2eproto
